Stack using two queues
Implement a Stack using two queues q1 and q2.
Input:
push(2)
push(3)
pop()
push(4)
pop()
Output: 3 4
â€‹Explanation:
push(2) the stack will be {2}
push(3) the stack will be {2 3}
pop()   poped element will be 3 the 
        stack will be {2}
push(4) the stack will be {2 4}
pop()   poped element will be 4  

Solution -->

class Queues
{
    Queue<Integer> q1 = new LinkedList<Integer>();
    Queue<Integer> q2 = new LinkedList<Integer>();
    
    /*The method pop which return the element poped out of the stack*/
    int pop()
    {
	if(!q1.isEmpty()){
	      int r = q1.peek();
	      q1.remove();
	      return r;
	  }
	  return -1;
    }
	
    /* The method push to push element into the stack */
    void push(int a)
    {
	  
	 while(!q1.isEmpty()){
	     int p = q1.peek();
	     q1.remove();
	     q2.add(p);
	 }
	 q1.add(a);
	 while(!q2.isEmpty()){
	     int k = q2.peek();
	     q2.remove();
	     q1.add(k);
	 }
    }
}

Expected Time Complexity: O(1) for push() and O(N) for pop() (or vice-versa).
Expected Auxiliary Space: O(1) for both push() and pop().
