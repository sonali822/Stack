You are in a party of N people, where only one person is known to everyone. Such a person may be present in the party, if yes, (s)he doesnâ€™t know anyone in the party. Your task is to find the stranger (celebrity) in party.

Example 1:

Input:
N = 3
M[][] = {{0 1 0},
         {0 0 0}, 
         {0 1 0}}
Output: 1
Explanation: The matrix will look like
0 1 0 
0 0 0
0 1 0
Here,  the celebrity is the person with
index 1 ie id 1 

Your Task:
You will be given a square matrix M[][] where if an element of row i and column j  is set to 1 it means ith person knows jth person. You need to complete the function getId() which finds the id of the celebrity if present else return -1. The function getId() takes two arguments, the square matrix M and its size N.

Note: 
M[i][i] will be equal to zero always.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).


Solution -->

class Celebrity
{
    // The task is to complete this function
    int getId(int M[][], int n)
    {
       Stack<Integer>s = new Stack<>();
       for(int i =0;i<n;i++){
           s.push(i);
       }
       while(s.size()>=2){
           int i=s.pop();
           int j= s.pop();
           if(M[i][j]==1){
               s.push(j);
           }else{
               s.push(i);
           }
       }
       int pot = s.pop();
       for(int i=0;i<n;i++){
           if(i!=pot){
               if(M[i][pot]==0 || M[pot][i]==1){
                   return -1;
               }
           }
           
       }
       return pot;
    }
}
